######################################################
## REMOVAL PIPELINE                                 ##
######################################################
##
## This pipeline template contains the logic to remove a given module's template deployment using the provided deployment name

########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | removeDeployment                | '$(removeDeployment)'                | Set to [true] to flag resource for removal. If not provided, defaults to false.                           | 'true'                                     |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'Custom Deployment Pool'                   |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'ubuntu20.04'                              |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                  | 120                                        |
##   | checkoutRepositories            | ''                                   | An optional list of repositories to check out at the beginning of this job in addition to the source      | 'Components'                               |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [c:/KeyVault]                                                      | 'c:/KeyVault'                              |
##   | deploymentBlocks                |                                      | The parameter file(s) to deploy with. Must be provided                                                    | path: 'C:/parameters.json'                 |
##   | location                        | '$(defaultLocation)'                 | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(defaultResourceGroupName)'        | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection                | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'     |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments       | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'     |
##   | parametersRepository            | '$(Build.Repository.Name)'           | The respository with the parameter files. Defaults to the triggering repository                           | 'Solutions'                                |
##   | modulesRepository               | '$(modulesRepository)'               | The respository with the modules.                                                                         | 'Components'                               |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'          |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                    |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  # Logic-related parameters
  modulePath: '$(modulePath)'
  templatePath: ''
  deploymentName: ''
  location: '$(defaultLocation)'
  resourceGroupName: '$(defaultResourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  parametersRepository: '$(Build.Repository.Name)'
  modulesRepository: '$(modulesRepository)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##

jobs:
  - job:
      displayName: Remove deployment with name [${{ parameters. deploymentName}}]
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    ${{ if ne( parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}

    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self

      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Define PS modules to install on the runner
            $Modules = @(
              @{ Name = 'Az.Accounts' },
              @{ Name = 'Az.Resources' }
              @{ Name = 'Az.CognitiveServices' },
              @{ Name = 'Az.Compute' },
              @{ Name = 'Az.KeyVault' },
              @{ Name = 'Az.Monitor' },
              @{ Name = 'Az.OperationalInsights' },
              @{ Name = 'Az.RecoveryServices' }
            )

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # [Multi Repo] Support task
      #--------------------------
      - task: PowerShell@2
        displayName: Handle Multi-Repo Invocation
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Handle multiple-repositories
            if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
              Write-Verbose "Multi-Repo Checkout" -Verbose
              $moduleRepoRoot = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulesRepository)'
              $parametersRepoRoot = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parametersRepository }}'
            } else {
              Write-Verbose "No Multi-Repo Checkout" -Verbose
              $moduleRepoRoot = '$(System.DefaultWorkingDirectory)'
              $parametersRepoRoot = '$(System.DefaultWorkingDirectory)'
            }
            Write-Output "##vso[task.setvariable variable=ModuleRepoRoot]$moduleRepoRoot"
            Write-Output "##vso[task.setvariable variable=parametersRepoRoot]$parametersRepoRoot"

      # [Removal] task(s)
      #------------------
      - task: AzurePowerShell@5
        displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          ScriptType: InlineScript
          failOnStandardError: false
          pwsh: true
          inline: |
            # Load used function
            . (Join-Path '$(moduleRepoRoot)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

            if(-not [String]::IsNullOrEmpty('${{ deploymentBlock.templateFilePath }}')) {
              $templateFilePath = Join-Path '$(moduleRepoRoot)' '${{ deploymentBlock.templateFilePath }}'
            } else {
              # Use default path
              $templateFilePath = (Test-Path (Join-Path '$(ModuleRepoRoot)' '$(templatePath)')) ?
                (Join-Path '$(ModuleRepoRoot)' '$(modulePath)' 'deploy.bicep') :
                (Join-Path '$(ModuleRepoRoot)' '$(modulePath)' 'deploy.json')
            }

            if (-not [String]::IsNullOrEmpty('$(deploymentName)')) {
              $functionInput = @{
                  DeploymentName    = '$(deploymentName)'
                  TemplateFilePath  = $templateFilePath
                  ResourceGroupName = '${{ parameters.resourceGroupName }}'
                  ManagementGroupId = '${{ parameters.managementGroupId }}'
                  Verbose           = $true
              }

              Write-Verbose 'Invoke task with' -Verbose
              Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

              Initialize-DeploymentRemoval @functionInput
            }
