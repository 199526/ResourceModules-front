parameters:
  removeDeployment: true
  prerelease: false
  templateFilePath: ''
  moduleResourceGroupName: ''

stages:
  # # - stage: init
  # #   displayName: Initialize pipeline
  # #   jobs:
  # #     - template: /.azuredevops/pipelineTemplates/jobs.getParameterFiles.yml

  - stage: validation
    displayName: Static validation
    jobs:
      - template: /.azuredevops/pipelineTemplates/jobs.validateModulePester.yml

  - stage: dependencyDeployment
    displayName: Dependency deployment
    dependsOn:
      - validation
    #   # - init
    jobs:
      - template: /.azuredevops/pipelineTemplates/jobs.validateModuleDeployment.yml
        parameters:
          templateFilePath: '$(modulePath)/.dependencies/dependencies.bicep'
          resourceGroupName: '${{ parameters.moduleResourceGroupName }}'
          removeDeployment: false
          jobDisplayName: 'Deploy dependencies'

  - stage: deployment
    displayName: Deployment validation
    dependsOn:
      # - dependencyDeployment
      # - init
    jobs:
      - template: /.azuredevops/pipelineTemplates/jobs.getParameterFiles.yml
      - template: /.azuredevops/pipelineTemplates/jobs.validateModuleDeployment.yml
        dependsOn:
        - getParameterFilePaths
        strategy:
          matrix: $[ dependencies.getParameterFilePaths.outputs['getParameterFilePathsTask.parameterTests'] ]
        parameters:
          templateFilePath: '$(modulePath)/deploy.bicep'
          resourceGroupName: '${{ parameters.moduleResourceGroupName }}'
          removeDeployment: '${{ parameters.removeDeployment }}'
          jobDisplayName: 'Deploy module with parameter file'

  - stage: dependencyRemoval
    displayName: Dependency removal
    dependsOn:
      - dependencyDeployment
      - deployment
    condition: and( succeededOrFailed(), eq( '${{ parameters.removeDeployment }}', 'true'))
    variables:
      deploymentName: $[ stageDependencies.dependencyDeployment.deploy.outputs['deployModule.deploymentName'] ]
    jobs:
      - template: /.azuredevops/pipelineTemplates/jobs.validateModuleDeployment.yml
        parameters:
          templateFilePath: '$(modulePath)/.dependencies/dependencies.bicep'
          resourceGroupName: '${{ parameters.moduleResourceGroupName }}'
          deploymentName: '$(deploymentName)'
          jobDisplayName: 'Remove dependencies'
          enableDeployment: false

  - stage: Publishing
    dependsOn:
      - deployment
    displayName: Publish module
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq('${{ parameters.prerelease }}', 'true')))
    jobs:
      - template: /.azuredevops/pipelineTemplates/jobs.publishModule.yml



##################

# - job: print_before_template
      #   # strategy:
      #   #   matrix: $parameterTests
      #   # variables:
      #   #   $parameterTestsToPrint1: stageDependencies.init.printParameterFilePaths.outputs['print_parameter_tests.parameterTestsToPrint']
      #   #   $parameterTestsToPrint2: $[ stageDependencies.init.printParameterFilePaths.outputs['print_parameter_tests.parameterTestsToPrint'] ]
      #   #   $parameterTestsToPrint3: $[ stageDependencies.init.printParameterFilePaths.outputs['print_parameter_tests.parameterTestsToPrint'] ]
      #   #   $parameterTestsToPrint4: $[ dependencies.init.outputs['printParameterFilePaths.printParameterFilePaths.print_parameter_tests.parameterTestsToPrint'] ]
      #   steps:
      #     - task: PowerShell@2
      #       displayName: 'print before template'
      #       inputs:
      #         targetType: inline
      #         pwsh: true
      #         script: |
      #           Write-Verbose '$(parameterTestsToPrint1)' -Verbose
      #           Write-Verbose '$(parameterTestsToPrint2)' -Verbose
      #           Write-Verbose '$(parameterTestsToPrint3)' -Verbose
      #           Write-Verbose '$(parameterTestsToPrint4)' -Verbose
      #           # Write-Host "##vso[task.setvariable variable=$jobsToRunInParallel;isOutput=true]$json"
      #         name: printvar2
