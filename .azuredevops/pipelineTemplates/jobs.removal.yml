#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | deploymentName                  | '$(deploymentName)'                  | The name of the deployment to remove the resource of                                                      | 'mydeployment'                             |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'Custom Deployment Pool'                   |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'ubuntu20.04'                              |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                  | 120                                        |
##   | checkoutRepositories            | ''                                   | An optional list of repositories to check out at the beginning of this job in addition to the source      | 'Components'                               |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [c:/KeyVault]                                                      | 'c:/KeyVault'                              |
##   | location                        | '$(defaultLocation)'                 | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(defaultResourceGroupName)'        | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | parametersRepository            | '$(Build.Repository.Name)'           | The respository with the parameter files. Defaults to the triggering repository                           | 'Solutions'                                |
##   | modulesRepository               | '$(modulesRepository)'               | The respository with the modules.                                                                         | 'Components'                               |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'          |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                    |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  checkoutRepositories: ''
  dependsOn: []
  deploymentName: ''
  # Logic-related parameters
  modulePath: '$(modulePath)'
  resourceGroupName: '$(defaultResourceGroupName)'
  parametersRepository: '$(Build.Repository.Name)'
  modulesRepository: '$(modulesRepository)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##

jobs:
  - job: removal_job
    displayName: Remove deployment
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    ${{ if ne( parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}

    steps:
      # [Checkout Repositories] task(s)
      #--------------------------------
      - checkout: self
      - ${{ if ne(parameters.checkoutRepositories, '') }}:
          - ${{ each checkoutRepository in parameters.checkoutRepositories }}:
              - checkout: ${{ checkoutRepository }}
                fetchDepth: 1 # the depth of commits to ask Git to fetch; if not set defaults to no limit
                path: 's/${{ checkoutRepository }}'

      # [Multi Repo] Support task
      #--------------------------
      - task: PowerShell@2
        displayName: Handle Multi-Repo Invocation
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Handle multiple-repositories
            if( "${{ join(';',parameters.checkoutRepositories) }}".length -gt 0) {
              Write-Verbose "Multi-Repo Checkout" -Verbose
              $moduleRepoRoot = Join-Path '$(System.DefaultWorkingDirectory)' '$(modulesRepository)'
              $parametersRepoRoot = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parametersRepository }}'
            } else {
              Write-Verbose "No Multi-Repo Checkout" -Verbose
              $moduleRepoRoot = '$(System.DefaultWorkingDirectory)'
              $parametersRepoRoot = '$(System.DefaultWorkingDirectory)'
            }
            Write-Output "##vso[task.setvariable variable=ModuleRepoRoot]$moduleRepoRoot"
            Write-Output "##vso[task.setvariable variable=parametersRepoRoot]$parametersRepoRoot"

      # [Removal] task(s)
      #------------------
      - task: AzurePowerShell@5
        displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
          preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
          ScriptType: InlineScript
          failOnStandardError: false
          pwsh: true
          inline: |
            # Load used function
            . (Join-Path '$(moduleRepoRoot)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

            # Determine correct template reference
            $templateFilePath = (Test-Path (Join-Path '$(moduleRepoRoot)' '$(modulePath)' '.dependencies' 'dep.parameters.bicep')) ?
                (Join-Path '$(moduleRepoRoot)' '$(modulePath)' '.dependencies' 'dep.parameters.bicep') :
                (Join-Path '$(moduleRepoRoot)' '$(modulePath)' '.dependencies' 'dep.parameters.json')

            $functionInput = @{
                DeploymentName    = '${{ parameters.deploymentName }}'
                TemplateFilePath  = $templateFilePath
                ResourceGroupName = '${{ parameters.resourceGroupName }}'
                ManagementGroupId = '${{ parameters.managementGroupId }}'
                Verbose           = $true
            }

            Write-Verbose 'Invoke task with' -Verbose
            Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

            Initialize-DeploymentRemoval @functionInput
