#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | removeDeployment                | '$(removeDeployment)'                | Set to [true] to flag resource for removal. If not provided, defaults to false.                           | 'true'                                     |
##   | poolName                        | '$(poolName)'                        | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'Custom Deployment Pool'                   |
##   | vmImage                         | '$(vmImage)'                         | You can provide either a [poolname] or [vmImage] to run the job on                                        | 'ubuntu20.04'                              |
##   | defaultJobTimeoutInMinutes      | 120                                  | The timeout for the job in this pipeline                                                                  | 120                                        |
##   | checkoutRepositories            | ''                                   | An optional list of repositories to check out at the beginning of this job in addition to the source      | 'Components'                               |
##   | modulePath                      | '$(modulePath)'                      | The path to the module to deploy. E.g. [c:/KeyVault]                                                      | 'c:/KeyVault'                              |
##   | deploymentBlocks                |                                      | The parameter file(s) to deploy with. Must be provided                                                    | path: 'C:/parameters.json'                 |
##   | location                        | '$(location)'                 | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(resourceGroupName)'        | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection                | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'     |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments       | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'     |
##   | parametersRepository            | '$(Build.Repository.Name)'           | The respository with the parameter files. Defaults to the triggering repository                           | 'Solutions'                                |
##   | modulesRepository               | '$(modulesRepository)'               | The respository with the modules.                                                                         | 'Components'                               |
##   | azurePowerShellVersion          | '$(azurePowerShellVersion)'          | Used for configuring the Azure PowerShellModules Version, one of the example values.                      | 'latestVersion' or 'OtherVersion'          |
##   | preferredAzurePowerShellVersion | '$(preferredAzurePowerShellVersion)' | Used for configuring the Azure PowerShellModules Version, either an empty string or the specific version. | '4.4.0'                                    |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'
  poolName: '$(poolName)'
  vmImage: '$(vmImage)'
  defaultJobTimeoutInMinutes: 120
  checkoutRepositories: ''
  # dependsOn: []
  # Logic-related parameters

  templateFilePath: ''
  parameterFilePath:
  customParameterFileTokens: ''

  removeDeployment: true
  enableDeployment: true
  deploymentName: ''
  modulePath: '$(modulePath)'
  deploymentBlocks: ''
  location: '$(location)'
  resourceGroupName: '$(resourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  parametersRepository: '$(Build.Repository.Name)'
  modulesRepository: '$(modulesRepository)'
  # Azure PowerShell Version parameters
  azurePowerShellVersion: '$(azurePowerShellVersion)'
  preferredAzurePowerShellVersion: '$(preferredAzurePowerShellVersion)'


##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##

jobs:
  # - ${{ each deploymentBlock in parameters.deploymentBlocks }}:
  - job: deploy
  # - job: ${{ deploymentBlock.jobName }}

    # ${{ if ne( deploymentBlock.displayName, '') }}:
    #   displayName: ${{ deploymentBlock.displayName }}
    # ${{ if eq( deploymentBlock.displayName, '') }}:
    #   displayName: Deploy with [${{ replace( deploymentBlock.path, '$(modulePath)', '') }}]
    timeoutInMinutes: ${{ parameters.defaultJobTimeoutInMinutes }}
    # ${{ if ne( parameters.dependsOn, '') }}:
    #   dependsOn: ${{ parameters.dependsOn }}
    pool:
      ${{ if ne(parameters.vmImage, '') }}:
        vmImage: ${{ parameters.vmImage }}
      ${{ if ne(parameters.poolName, '') }}:
        name: ${{ parameters.poolName }}

    strategy:
          matrix: '$(parameterFilePath)'

    ##---------------------------------------------##
    ## TEMPLATE LOGIC                              ##
    ##---------------------------------------------##

    steps:
      # [Agent] Prepare environment
      #----------------------------
      - task: PowerShell@2
        displayName: 'Setup agent for deployment'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

            # Write-Verbose "parameterPaths: $(parameterFilePath)" -Verbose

            # Define PS modules to install on the runner
            $Modules = @(
                @{ Name = 'Az.Accounts' },
                @{ Name = 'Az.Resources' }
            )

            # Additional PS modules need to be installed for the removal step in case it is enabled
            if ('${{ parameters.removeDeployment}}' -eq 'true') {
              $Modules += @(
                @{ Name = 'Az.CognitiveServices' },
                @{ Name = 'Az.Compute' },
                @{ Name = 'Az.KeyVault' },
                @{ Name = 'Az.Monitor' },
                @{ Name = 'Az.OperationalInsights' },
                @{ Name = 'Az.RecoveryServices' }
              )
            }

            # Set agent up
            Set-EnvironmentOnAgent -PSModules $Modules

      # # [Agent] Replace tokens
      # #-----------------------
      # #  $msiPrincipalId = (ConvertFrom-Json '$(deploymentOutput)').principalId
      # #           Write-Verbose "msiPrincipalId: $msiPrincipalId" -Verbose
      # #           Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'msiPrincipalId', $msiPrincipalId)
      # - ${{ if ne(parameters.parameterFilePath,'') }}:
      #     - task: AzurePowerShell@5
      #       displayName: 'Replace Tokens [${{ parameters.parameterFilePath }}] via connection [${{ parameters.serviceConnection }}]'
      #       inputs:
      #         azureSubscription: ${{ parameters.serviceConnection }}
      #         azurePowerShellVersion: 'latestVersion'
      #         preferredAzurePowerShellVersion: ''
      #         ScriptType: InlineScript
      #         pwsh: true
      #         inline: |
      #           # Load used functions
      #           . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

      #           # Load Settings File
      #           $Settings = Get-Content -Path (Join-Path '$(System.DefaultWorkingDirectory)' 'settings.json') | ConvertFrom-Json -AsHashTable

      #           # Construct Token Function Input
      #           $ConvertTokensInputs = @{
      #               Tokens      = @{}
      #               FilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
      #               TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
      #               TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
      #           }

      #           # Add defaults
      #           $ConvertTokensInputs.Tokens += @{
      #             resourceGroupName = '${{ parameters.resourceGroupName }}'
      #             subscriptionId    = '${{ parameters.subscriptionId }}'
      #             managementGroupId = '${{ parameters.managementGroupId }}'
      #             tenantId          = '$(ARM_TENANT_ID)'
      #             deploymentSpId    = '$(DEPLOYMENT_SP_ID)'
      #           }

      #           # Add local tokens
      #           if ($Settings.parameterFileTokens.localTokens) {
      #             $tokenMap = @{}
      #             foreach ($token in $Settings.parameterFileTokens.localTokens) {
      #               $tokenMap += @{ $token.name = $token.value }
      #             }
      #             Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
      #             $ConvertTokensInputs.Tokens += $tokenMap
      #           }

      #           # Add custom tokens (passed in via the pipeline)
      #           if(-not [String]::IsNullOrEmpty('${{ parameters.customParameterFileTokens }}')) {
      #             $customTokens = '${{ parameters.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
      #             Write-Verbose ('Using custom parameter file tokens [{0}]' -f  ($customTokens.Keys -join ', ')) -Verbose
      #             $ConvertTokensInputs.Tokens += $customTokens
      #           }

      #           # Invoke Token Replacement Functionality
      #           $null = Convert-TokensInFile @ConvertTokensInputs

      # # [Validation] task(s)
      # #---------------------
      # - task: AzurePowerShell@5
      #   ${{ if ne(parameters.parameterFilePath,'') }}:
      #     displayName: 'Validate parameter file via connection [${{ parameters.serviceConnection }}]'
      #   ${{ if eq(parameters.parameterFilePath,'') }}:
      #     displayName: 'Validate template file via connection [${{ parameters.serviceConnection }}]'
      #   condition: and(succeeded(), eq( '${{ parameters.enableDeployment }}', 'true'))
      #   inputs:
      #     azureSubscription: ${{ parameters.serviceConnection }}
      #     azurePowerShellVersion: 'latestVersion'
      #     preferredAzurePowerShellVersion: ''
      #     ScriptType: InlineScript
      #     pwsh: true
      #     inline: |
      #       # Load used functions
      #       . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')
      #       . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

      #       # ----------- #
      #       # INVOKE TEST #
      #       # ----------- #
      #       $templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
      #       $functionInput = @{
      #         templateFilePath     = $templateFilePath
      #         location             = '${{ parameters.location }}'
      #         resourceGroupName    = '${{ parameters.resourceGroupName }}'
      #         subscriptionId       = '${{ parameters.subscriptionId }}'
      #         managementGroupId    = '${{ parameters.managementGroupId }}'
      #         additionalParameters = @{}
      #       }

      #       if(-not [String]::IsNullOrEmpty('${{ parameters.parameterFilePath }}')) {
      #         $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
      #       }

      #       # Passing the resource group name as a deployment parameter if accepted
      #       $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
      #       if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
      #         $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
      #         $parameters = $templateContent.parameters.Keys
      #         if($parameters -contains 'resourceGroupName') {
      #           $functionInput['additionalParameters'] = @{
      #             resourceGroupName = '${{ parameters.resourceGroupName }}'
      #           }
      #         }
      #       }

      #       # # Enables us to pass the resource group name as a deployment parameter
      #       # if(-not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
      #       #   $functionInput['additionalParameters'] = @{
      #       #     resourceGroupName = '${{ parameters.resourceGroupName }}'
      #       #   }
      #       # }

      #       $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
      #       if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
      #           $functionInput['additionalParameters'] += @{
      #               enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
      #           }
      #       }

      #       Write-Verbose "Invoke task with" -Verbose
      #       Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

      #       Test-TemplateDeployment @functionInput -Verbose

      # # [Deployment] task(s)
      # #---------------------
      # - task: AzurePowerShell@5
      #   name: deployModule
      #   ${{ if ne(parameters.parameterFilePath,'') }}:
      #     displayName: 'Deploy parameter file via connection [${{ parameters.serviceConnection }}]'
      #   ${{ if eq(parameters.parameterFilePath,'') }}:
      #     displayName: 'Deploy template file via connection [${{ parameters.serviceConnection }}]'
      #   condition: and(succeeded(), eq( '${{ parameters.enableDeployment }}', 'true'))
      #   inputs:
      #     azureSubscription: ${{ parameters.serviceConnection }}
      #     azurePowerShellVersion: 'latestVersion'
      #     preferredAzurePowerShellVersion: ''
      #     pwsh: true
      #     ScriptType: InlineScript
      #     inline: |
      #       # Load used functions
      #       . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')
      #       . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

      #       # ----------------- #
      #       # INVOKE DEPLOYMENT #
      #       # ----------------- #
      #       $templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
      #       $functionInput = @{
      #         templateFilePath     = $templateFilePath
      #         location             = '${{ parameters.location }}'
      #         resourceGroupName    = '${{ parameters.resourceGroupName }}'
      #         subscriptionId       = '${{ parameters.subscriptionId }}'
      #         managementGroupId    = '${{ parameters.managementGroupId }}'
      #         doNotThrow           = $true
      #         additionalParameters = @{}
      #       }

      #       if(-not [String]::IsNullOrEmpty('${{ parameters.parameterFilePath }}')) {
      #         $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
      #       }

      #       # Passing the resource group name as a deployment parameter if accepted
      #       $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
      #       if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
      #         $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
      #         $parameters = $templateContent.parameters.Keys
      #         if($parameters -contains 'resourceGroupName') {
      #           $functionInput['additionalParameters'] = @{
      #             resourceGroupName = '${{ parameters.resourceGroupName }}'
      #           }
      #         }
      #       }

      #       # # Enables us to pass the resource group name as a deployment parameter
      #       # if(-not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}')) {
      #       #   $functionInput['additionalParameters'] = @{
      #       #     resourceGroupName = '${{ parameters.resourceGroupName }}'
      #       #   }
      #       # }

      #       $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
      #       if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
      #           $functionInput['additionalParameters'] += @{
      #               enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
      #           }
      #       }

      #       Write-Verbose "Invoke task with" -Verbose
      #       Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

      #       # Invoke deployment
      #       $res = New-TemplateDeployment @functionInput -Verbose

      #       # Get deployment name
      #       Write-Host ('##vso[task.setvariable variable=deploymentName]{0}' -f $res.deploymentName)

      #       # Populate further outputs
      #       $deploymentOutputHash=@{}

      #       foreach ($outputKey in $res.deploymentOutput.Keys) {
      #         Write-Output ('##vso[task.setvariable variable={0}]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
      #         $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
      #       }

      #       $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
      #       Write-Verbose "Deployment output: $deploymentOutput" -Verbose
      #       Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'deploymentOutput', $deploymentOutput)

      #       if ($res.ContainsKey('exception')) {
      #         # Happens only if there is an exception
      #         throw $res.exception
      #       }

      # # [Removal] task(s)
      # #------------------
      # - task: AzurePowerShell@5
      #   displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
      #   condition: and(succeededOrFailed(), eq( '${{ parameters.removeDeployment }}', 'true'))
      #   # , or(ne( parameters['deploymentName'], ''), ne( variables['deploymentName'], '')))
      #   inputs:
      #     azureSubscription: ${{ parameters.serviceConnection }}
      #     azurePowerShellVersion: ${{ parameters.azurePowerShellVersion }}
      #     preferredAzurePowerShellVersion: ${{ parameters.preferredAzurePowerShellVersion }}
      #     ScriptType: InlineScript
      #     failOnStandardError: false
      #     pwsh: true
      #     inline: |
      #       # Load used function
      #       . (Join-Path '$(moduleRepoRoot)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

      #       # ----------------- #
      #       # INVOKE DEPLOYMENT #
      #       # ----------------- #
      #       $templateFilePath     = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
      #       $functionInput = @{
      #         templateFilePath     = $templateFilePath
      #         ResourceGroupName = '${{ parameters.resourceGroupName }}'
      #         ManagementGroupId = '${{ parameters.managementGroupId }}'
      #         Verbose           = $true
      #       }

      #       if (-not [String]::IsNullOrEmpty('${{ parameters.deploymentName }}') {
      #         $functionInput['DeploymentName'] = '${{ parameters.deploymentName }}'
      #       }

      #       if (-not [String]::IsNullOrEmpty('$(deploymentName)')) {
      #         $functionInput['DeploymentName'] = '$(deploymentName)'
      #       }

      #       Write-Verbose 'Invoke task with' -Verbose
      #       Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

      #       Initialize-DeploymentRemoval @functionInput
