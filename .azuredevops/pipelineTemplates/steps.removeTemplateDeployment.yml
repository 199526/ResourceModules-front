parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'

  # Logic-related parameters
  templateFilePath: ''
  resourceGroupName: '$(defaultResourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'

steps:
  # [Agent] Prepare environment
  #----------------------------
  # - task: PowerShell@2
  #   displayName: 'Setup agent for removal'
  #   condition: and( succeededOrFailed(), ne('$(deploymentName)',''), not(startsWith('$(deploymentName)', '$(')) )
  #   inputs:
  #     targetType: inline
  #     pwsh: true
  #     script: |
  #       # Load used functions
  #       . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

  #       # Define PS modules to install on the runner
  #       $Modules = @(
  #         @{ Name = 'Az.Accounts' },
  #         @{ Name = 'Az.Resources' }
  #         @{ Name = 'Az.CognitiveServices' },
  #         @{ Name = 'Az.Compute' },
  #         @{ Name = 'Az.KeyVault' },
  #         @{ Name = 'Az.Monitor' },
  #         @{ Name = 'Az.OperationalInsights' },
  #         @{ Name = 'Az.RecoveryServices' }
  #       )

  #       # Set agent up
  #       Set-EnvironmentOnAgent -PSModules $Modules

  # [Removal] task(s)
  #------------------
  - task: AzurePowerShell@5
    displayName: 'Remove deployed resources via [${{ parameters.serviceConnection }}]'
    # condition: and(succeededOrFailed(), ne('$(deploymentName)',''), not(startsWith('$(deploymentName)', '$(')) )
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      azurePowerShellVersion: 'latestVersion'
      preferredAzurePowerShellVersion: ''
      ScriptType: InlineScript
      failOnStandardError: false
      pwsh: true
      inline: |
        # Load used function
        . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')

        $functionInput = @{
            DeploymentName    = '$(deploymentName)'
            TemplateFilePath  = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
            ResourceGroupName = '${{ parameters.resourceGroupName }}'
            ManagementGroupId = '${{ parameters.managementGroupId }}'
            Verbose           = $true
        }

        Write-Verbose 'Invoke task with' -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        #Initialize-DeploymentRemoval @functionInput
