#########################################################
## DEPLOYMENT PIPELINE                                 ##
#########################################################
##
## This pipeline template contains the logic to deploy a given module's ARM template using the provided parameter file(s)
##
## Enabled levels of deployment
## - Resource-Group-Level
## - Subscription-Level
## - Management-Group-Level
## - Tenant-Level
##
########################################################
##
##---------------------------------------------##
## TEMPLATE PARAMETERS                         ##
##---------------------------------------------##
##
## By default it uses the variables specified in the below [parameters] section. However, you can overwrite these variables in the
##    referencing pipeline by providing the parameter explicitly.
##
## NOTE: If you don't need to overwrite a shared value, you can IGNORE this section
##
##   |=================================================================================================================================================================================================================================|
##   | Parameter                       | Default Value                        | Description                                                                                               | Example                                    |
##   |---------------------------------|--------------------------------------|-----------------------------------------------------------------------------------------------------------|--------------------------------------------|
##   | serviceConnection               | '$(serviceConnection)'               | The service connection that connects to Azure                                                             | 'demo-internal'                            |
##   | location                        | '$(location)'                        | The location to deploy with                                                                               | 'EastUs2'                                  |
##   | resourceGroupName               | '$(defaultResourceGroupName)'        | The resourcegroup to deploy into. Required only for Resource-Group-Level deployments                      | 'validation-rg'                            |
##   | subscriptionId                  | '$(ARM_SUBSCRIPTION_ID)'             | The id of the subscription to deploy into when using a Management group service connection                | 'aed7c000-6387-412e-bed0-24dfddf4bbc6'     |
##   | managementGroupId               | '$(ARM_MGMTGROUP_ID)'                | The id of the management group to deploy into. Required only for Management-Group-Level deployments       | '6ycc9620-cb01-454f-9ebc-fc6b1df48d64'     |
##   | modulesRepository               | '$(modulesRepository)'               | The respository with the modules.                                                                         | 'Components'                               |
##   |=================================================================================================================================================================================================================================|
##
##---------------------------------------------##

parameters:
  # Pipeline-related parameters
  serviceConnection: '$(serviceConnection)'

  # Logic-related parameters
  templateFilePath: ''
  parameterFilePath: ''
  location: '$(location)'
  resourceGroupName: '$(defaultResourceGroupName)'
  subscriptionId: '$(ARM_SUBSCRIPTION_ID)'
  managementGroupId: '$(ARM_MGMTGROUP_ID)'
  modulesRepository: '$(modulesRepository)'
  customParameterFileTokens: ''

##---------------------------------------------##
## TEMPLATE LOGIC                              ##
##---------------------------------------------##

steps:
  # [Agent] Prepare environment
  #----------------------------
  - task: PowerShell@2
    displayName: 'Setup agent for deployment'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        # Load used functions
        . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Define PS modules to install on the runner
        $Modules = @(
            @{ Name = 'Az.Accounts' },
            @{ Name = 'Az.Resources' }
        )

        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules

  # [Agent] Replace tokens
  #-----------------------
  - ${{ if ne(parameters.parameterFilePath,'') }}:
      - task: AzurePowerShell@5
        displayName: 'Replace Tokens [${{ parameters.parameterFilePath }}] via connection [${{ parameters.serviceConnection }}]'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          azurePowerShellVersion: 'latestVersion'
          preferredAzurePowerShellVersion: ''
          ScriptType: InlineScript
          pwsh: true
          inline: |
            # Load used functions
            . (Join-Path '$(System.DefaultWorkingDirectory)' 'utilities' 'pipelines' 'tokensReplacement' 'Convert-TokensInFile.ps1')

            # Load Settings File
            $Settings = Get-Content -Path (Join-Path '$(System.DefaultWorkingDirectory)' 'settings.json') | ConvertFrom-Json -AsHashTable

            # Construct Token Function Input
            $ConvertTokensInputs = @{
                Tokens      = @{}
                FilePath    = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
                TokenPrefix = $Settings.parameterFileTokens.tokenPrefix
                TokenSuffix = $Settings.parameterFileTokens.tokenSuffix
            }

            # Add defaults
            $ConvertTokensInputs.Tokens += @{
              resourceGroupName = '${{ parameters.resourceGroupName }}'
              subscriptionId    = '${{ parameters.subscriptionId }}'
              managementGroupId = '${{ parameters.managementGroupId }}'
              tenantId          = '$(ARM_TENANT_ID)'
              deploymentSpId    = '$(DEPLOYMENT_SP_ID)'
            }

            # Add local tokens
            if ($Settings.parameterFileTokens.localTokens) {
              $tokenMap = @{}
              foreach ($token in $Settings.parameterFileTokens.localTokens) {
                $tokenMap += @{ $token.name = $token.value }
              }
              Write-Verbose ('Using local tokens [{0}]' -f ($tokenMap.Keys -join ', ')) -Verbose
              $ConvertTokensInputs.Tokens += $tokenMap
            }

            # Add custom tokens (passed in via the pipeline)
            if(-not [String]::IsNullOrEmpty('${{ parameters.customParameterFileTokens }}')) {
              $customTokens = '${{ parameters.customParameterFileTokens }}' | ConvertFrom-Json -AsHashTable
              Write-Verbose ('Using custom parameter file tokens [{0}]' -f  ($customTokens.Keys -join ', ')) -Verbose
              $ConvertTokensInputs.Tokens += $customTokens
            }

            # Invoke Token Replacement Functionality
            $null = Convert-TokensInFile @ConvertTokensInputs

  # [Validation] task(s)
  #---------------------
  - task: AzurePowerShell@5
    ${{ if ne(parameters.parameterFilePath,'') }}:
      displayName: 'Validate parameter file via connection [${{ parameters.serviceConnection }}]'
    ${{ if eq(parameters.parameterFilePath,'') }}:
      displayName: 'Validate template file via connection [${{ parameters.serviceConnection }}]'
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      azurePowerShellVersion: 'latestVersion'
      preferredAzurePowerShellVersion: ''
      ScriptType: InlineScript
      pwsh: true
      inline: |
        # Load used functions
        . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'Test-TemplateDeployment.ps1')
        . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

        $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json

        # ----------- #
        # INVOKE TEST #
        # ----------- #
        $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
        $functionInput = @{
          templateFilePath     = $templateFilePath
          location             = '${{ parameters.location }}'
          resourceGroupName    = '${{ parameters.resourceGroupName }}'
          subscriptionId       = '${{ parameters.subscriptionId }}'
          managementGroupId    = '${{ parameters.managementGroupId }}'
          additionalParameters = @{}
        }

        if(-not [String]::IsNullOrEmpty('${{ parameters.parameterFilePath }}')) {
          $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
        }

        # Passing the resource group name as a deployment parameter if accepted
        $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
        $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
        $parameters = $templateContent.parameters.Keys

        if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}') -and $parameters -contains 'resourceGroupName') {
          $functionInput['additionalParameters'] += @{
            resourceGroupName = '${{ parameters.resourceGroupName }}'
          }
        }
        if($parameters -contains 'namePrefix') {
          $functionInput['additionalParameters'] += @{
            namePrefix = $projectSettings.parameterFileTokens.localTokens[0].value
          }
        }

        $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json
        if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
            $functionInput['additionalParameters'] += @{
                enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
            }
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        Test-TemplateDeployment @functionInput -Verbose

  # [Deployment] task(s)
  #---------------------
  - task: AzurePowerShell@5
    ${{ if ne(parameters.parameterFilePath,'') }}:
      displayName: 'Deploy parameter file via connection [${{ parameters.serviceConnection }}]'
    ${{ if eq(parameters.parameterFilePath,'') }}:
      displayName: 'Deploy template file via connection [${{ parameters.serviceConnection }}]'
    name: deployModule
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      azurePowerShellVersion: 'latestVersion'
      preferredAzurePowerShellVersion: ''
      pwsh: true
      ScriptType: InlineScript
      inline: |
        # Load used functions
        . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'resourceDeployment' 'New-TemplateDeployment.ps1')
        . (Join-Path '$(System.DefaultWorkingDirectory)' '$(pipelineFunctionsPath)' 'sharedScripts' 'Get-ScopeOfTemplateFile.ps1')

        $projectSettings = Get-Content -Path 'settings.json' | ConvertFrom-Json

        # ----------------- #
        # INVOKE DEPLOYMENT #
        # ----------------- #
        $templateFilePath = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.templateFilePath }}'
        $functionInput = @{
          templateFilePath     = $templateFilePath
          location             = '${{ parameters.location }}'
          resourceGroupName    = '${{ parameters.resourceGroupName }}'
          subscriptionId       = '${{ parameters.subscriptionId }}'
          managementGroupId    = '${{ parameters.managementGroupId }}'
          doNotThrow           = $true
          additionalParameters = @{}
        }

        if(-not [String]::IsNullOrEmpty('${{ parameters.parameterFilePath }}')) {
          $functionInput['parameterFilePath'] = Join-Path '$(System.DefaultWorkingDirectory)' '${{ parameters.parameterFilePath }}'
        }

        # Passing the resource group name as a deployment parameter if accepted
        $deploymentScope = Get-ScopeOfTemplateFile -TemplateFilePath $templateFilePath
        $templateContent = az bicep build --file $templateFilePath --stdout | ConvertFrom-Json -AsHashtable
        $parameters = $templateContent.parameters.Keys

        if ($deploymentScope -ne 'resourceGroup' -and -not [String]::IsNullOrEmpty('${{ parameters.resourceGroupName }}') -and $parameters -contains 'resourceGroupName') {
          $functionInput['additionalParameters'] += @{
            resourceGroupName = '${{ parameters.resourceGroupName }}'
          }
        }
        if($parameters -contains 'namePrefix') {
          $functionInput['additionalParameters'] += @{
            namePrefix = $projectSettings.parameterFileTokens.localTokens[0].value
          }
        }

        if (-not [String]::IsNullOrEmpty($projectSettings.enableDefaultTelemetry) -and (Get-Content -Path $functionInput.templateFilePath -Raw) -like '*param enableDefaultTelemetry*') {
            $functionInput['additionalParameters'] += @{
                enableDefaultTelemetry = $projectSettings.enableDefaultTelemetry
            }
        }

        Write-Verbose "Invoke task with" -Verbose
        Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

        # Invoke deployment
        $res = New-TemplateDeployment @functionInput -Verbose

        # Get deployment name
        Write-Host ('##vso[task.setvariable variable=deploymentName]{0}' -f $res.deploymentName)
        Write-Host ('##vso[task.setvariable variable=deploymentName;isOutput=true]{0}' -f $res.deploymentName)

        # Populate further outputs
        $deploymentOutputHash=@{}

        foreach ($outputKey in $res.deploymentOutput.Keys) {
          Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f $outputKey, $res.deploymentOutput[$outputKey].Value)
          $deploymentOutputHash.add($outputKey,$res.deploymentOutput[$outputKey].Value)
        }

        $deploymentOutput = $deploymentOutputHash | ConvertTo-Json -Compress -Depth 100
        Write-Verbose "Deployment output: $deploymentOutput" -Verbose
        Write-Output ('##vso[task.setvariable variable={0};isOutput=true]{1}' -f 'deploymentOutput', $deploymentOutput)

        if ($res.ContainsKey('exception')) {
          # Happens only if there is an exception
          throw $res.exception
        }
