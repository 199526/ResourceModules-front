#########################################################
## 'Validate module with Pester' Composite Action      ##
#########################################################
##
## This composite action contains the logic to validate a module using a set of Pester tests
## The tests are implemented in file 'modules/.global/global.module.tests.ps1'
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |======================================================================================================================================|
##   | Parameter    | Required | Default | Description                     | Example                                                        |
##   |--------------|----------|---------|---------------------------------|----------------------------------------------------------------|
##   | modulePath   | true     | ''      | The path to the module's folder | 'modules/Microsoft.ApiManagement/service'                      |
##   | testFilePath | true     | ''      | The path to the test file       | 'utilities/pipelines/staticValidation/global.module.tests.ps1' |
##   |======================================================================================================================================|
##
##---------------------------------------------##

name: 'Execute Pester module tests'
description: 'Execute Pester module tests (if any)'

inputs:
  modulePath:
    description: "The path to the module's folder"
    required: true
    default: ''
  testFilePath:
    description: "The path to the test file"
    required: true
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Setup agent'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Setup agent"

        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')

        # Define PS modules to install on the runner
        $Modules = @(
            # This is the latest tested Pester version. Uncomment the next line in case of a future breaking change in the default version installed on the runner.
            # @{ Name = 'Pester'; Version = '5.3.1' }
            @{ Name = 'Az.Resources' }
        )

        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules

        Write-Output "::endgroup::"

    - name: 'Azure Login'
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # [Module Pester Test] task(s)
    #-----------------------------
    - name: 'Run global tests via Pester'
      id: pester_run_step
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output "::group::Run global tests via Pester"

        # Set test input module path
        $moduleFolderPaths = @(Join-Path $env:GITHUB_WORKSPACE "${{ inputs.modulePath }}")
        $moduleFolderPaths += (Get-ChildItem $moduleFolderPaths -Recurse -Directory -Force).FullName | Where-Object {
          (Get-ChildItem $_ -File -Depth 0 -Include @('deploy.json', 'deploy.bicep') -Force).Count -gt 0
        }
        Write-Verbose "Execute tests in path(s):" -Verbose
        foreach($moduleFolderPath in $moduleFolderPaths) {
          Write-Verbose "- [($moduleFolderPath]" -Verbose
        }

        # Set enforced token list
        $enforcedTokenList = @{}
        if (-not [String]::IsNullOrEmpty('${{ env.ARM_SUBSCRIPTION_ID }}')) {
            $enforcedTokenList['subscriptionId'] = '${{ env.ARM_SUBSCRIPTION_ID }}'
        }
        if (-not [String]::IsNullOrEmpty('${{ env.ARM_MGMTGROUP_ID }}')) {
            $enforcedTokenList['managementGroupId'] = '${{ env.ARM_MGMTGROUP_ID }}'
        }
        if (-not [String]::IsNullOrEmpty('${{ env.DEPLOYMENT_SP_ID }}')) {
            $enforcedTokenList['deploymentSpId'] = '${{ env.DEPLOYMENT_SP_ID }}'
        }
        if (-not [String]::IsNullOrEmpty('${{ env.ARM_TENANT_ID }}')) {
            $enforcedTokenList['tenantId'] = '${{ env.ARM_TENANT_ID }}'
        }

        # Set and print test output path
        # $testFileFullPath = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.testFilePath }}"
        # Write-Verbose "testFileFullPath: $testFileFullPath" -Verbose
        # $testFileParentFolder = (Get-Item $testFileFullPath).Directory.FullName
        # $testFileParentFolder = (Get-Item "${{ inputs.testFilePath }}").Directory.FullName
        $testFilePath = "${{ inputs.testFilePath }}"
        Write-Verbose "testFilePath: $testFilePath" -Verbose
        $testFileDirectory = $testFilePath.Substring(0, $testFilePath.LastIndexOf("/"))
        Write-Verbose "testFileDirectory: $testFileDirectory" -Verbose
        $outputPath = Join-Path $testFileDirectory 'global-testResults.xml'
        Write-Verbose "Pester tests output: $outputPath" -Verbose
        Write-Output ('::set-output name={0}::{1}' -f 'outputPath', $outputPath)

        # --------------------- #
        # Invoke Pester test(s) #
        # --------------------- #
        Invoke-Pester -Configuration @{
          Run        = @{
            # Container = New-PesterContainer -Path '${{ inputs.testFilePath }}' -Data @{
            Container = New-PesterContainer -Path (Join-Path $env:GITHUB_WORKSPACE $testFilePath) -Data @{
              moduleFolderPaths = $moduleFolderPaths
              enforcedTokenList = $enforcedTokenList
            }
          }
          TestResult = @{
            TestSuiteName = 'Global Module Tests'
            OutputPath    = $outputPath
            OutputFormat  = 'JUnitXml'
            Enabled       = $true
          }
          Output     = @{
            Verbosity = 'Detailed'
          }
        }

    - name: 'Publish Test Results'
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        # files: '${{ steps.pester_run_step.outputs.outputPath }}'
        files: 'utilities/pipelines/staticValidation/global.module.tests.ps1'
